# SPDX-FileCopyrightText: 2022 Weston Schmidt <weston_schmidt@alumni.purdue.edu>
# SPDX-License-Identifier: Apache-2.0
---
name: CI

on:
  workflow_call:
    inputs:

      # General or common inputs.
      go-version:
        description: "The go version to use.  Example: '1.18.x'"
        required: false
        type: string
        default: '^1.19.x'

      go-version-latest:
        description: "Will always use the latest version of go available."
        required: false
        type: boolean
        default: true

      working-directory:
        description: 'The working directory for this project.'
        required: false
        type: string
        default: .

      # Lint focused
      linter-timeout:
        description: 'The timeout to pass on to the linter.'
        required: false
        type: string
        default: '5m'

      linter-version:
        description: 'The working directory for this project.'
        required: false
        type: string
        default: 'latest'

      # Release focused
      release-custom-file:
        description: "If the project needs a custom release file, use that instead."
        required: false
        type: boolean
        default: false

      release-project-name:
        description: "The project name / binary name to use if not the repo name."
        required: false
        type: string
        default: ''


jobs:
  test:
    needs: [ style, lint, reuse ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        go: ['1.18', '1.19']
    runs-on: ${{ matrix.os }}
    name: Build & Test

    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ matrix.go }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      - name: Build & Test (no race)
        if: |
          matrix.os == 'windows-latest'
        working-directory: ${{ inputs.working-directory }}
        run: |
          go get   ./...
          go build ./...
          go test  ./...

      - name: Build & Test (with race)
        if: |
          matrix.os != 'windows-latest'
        working-directory: ${{ inputs.working-directory }}
        run: |
          go build      ./...
          go test -race ./...


  coverage:
    runs-on: [ 'ubuntu-latest' ]
    name: Build & Test & Report Coverage

    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      - name: goschtalt -- Coverage
        working-directory: ${{ inputs.working-directory }}
        run: |
          go get ./...
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # Upload the results of code coverage once

      - name: Send results to codecov.io
        uses: codecov/codecov-action@894ff025c7b54547a9a2a1e9f228beae737ad3c2 # v3.1.3
        with:
          directory:  ${{ inputs.working-directory }}
          flags: unittests
          files: >-
            ./coverage.out


  style:
    name: Check code style
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      - name: Run gofmt
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          gofmt -d $(find . -path ./vendor -prune -o -name '*.go' -print) > fmt.patch
          # Error check & fail if any format mismatches are detected.
          if [ $(wc fmt.patch | awk '{print $1}') -ne 0 ]; then
            cat fmt.patch;
            exit 1;
          fi


  lint:
    name: Golint Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      - name: Lint Entire Repo
        if: github.event_name != 'pull_request'
        uses: golangci/golangci-lint-action@08e2f20817b15149a52b5b3ebe7de50aff2ba8c5 # v3.4.0
        with:
          working-directory: ${{ inputs.working-directory }}
          version:           ${{ inputs.linter-version }}
          args:    --timeout ${{ inputs.linter-timeout }}


  reuse:
    name: REUSE Checking
    runs-on: [ 'ubuntu-latest' ]
    steps: 
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@e7a435374d26d54b324fa6699d8eafb076340dfd # v1.2.0


  license:
    name: License Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      # setup ruby environment before running jonabc/setup-licensed
      - uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
        with:
          ruby-version: ruby

      - name: Setup licensed
        uses: jonabc/setup-licensed@d6b3a6f7058c2b40c06d205e13e15c2418977566 # v1.1.4
        with:
         version: 4.x
         dependabot_skip:    true
         cleanup_on_success: true
         github_token:       ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Org Approved Licenses & merge to local
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f .licensed.yml ]; then
            echo "Please submit these licenses to the shared list..."
            mv .licensed.yml .licensed_local.yml
          fi
          if [ -f .licensed.yaml ]; then
            echo "Please submit these licenses to the shared list..."
            mv .licensed.yaml .licensed_local.yml
          fi
          if [ -f .licensed.json ]; then
            echo "JSON is not supported.  Please use .licensed.yml or submit a patch."
          fi
          if [ ! -f .licensed_local.yml ]; then
            touch .licensed_local.yml
          fi
          curl -L -s -f -H 'Accept: application/vnd.github.v3.raw' \
            --max-time    10 \
            --retry       5 \
            --retry-delay 1 \
            https://api.github.com/repos/goschtalt/.github/contents/licensing/org-approved.yml?ref=main \
            -o .licensed_common.yml
          yq eval-all '. as $item ireduce ({}; . *+  $item)' .licensed_local.yml .licensed_common.yml > .licensed.yml

      - name: Run licensed cache
        working-directory: ${{ inputs.working-directory }}
        run: |
          go get ./...
          licensed cache

      - name: Validate compliance
        working-directory: ${{ inputs.working-directory }}
        run: |
          licensed status -f yaml > licensing.yml || true
          yq eval 'del(.apps[].sources[].dependencies[] | select(.allowed == "true") )' licensing.yml > disallowed.yml
          licensed status

      - name: Archive license results
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: licensing
          path: |
            ${{ inputs.working-directory }}/licensing.yml
            ${{ inputs.working-directory }}/disallowed.yml


  goreportcard:
    name: Update goreportcard.com
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: 'Update the results on goreportcard.com'
        run: |
          curl -s -o /dev/null -L \
            --max-time    10 \
            --retry       5 \
            --retry-delay 1 \
            -w "HTTP Status: %{http_code}\n" \
            -X POST -F "repo=github.com/${{ github.repository }}" https://goreportcard.com/checks


  release:
    name: Release
    needs: [ test, style, lint, reuse, license ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Fetch tags for TagBody, TagSubject and TagContents
        run: git fetch --force --tags

      - name: Setup go version
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}

      - name: Generate the .goreleaser.yml file
        if: inputs.release-custom-file == false
        shell: bash
        run: |
          project_name=${{ inputs.release-project-name }}
          if [[ $project_name == "" ]]; then
            project_name=$(echo ${{ github.repository }} | sed 's:.*/::')
          fi

          echo "---" > .goreleaser.yml
          gecho() { echo "$1" >> .goreleaser.yml ; }
          gecho "project_name: ${project_name}"
          gecho ""
          gecho "builds:"
          gecho "  - skip: true"
          gecho ""
          gecho "changelog:"
          gecho "  use: github"
          gecho "  sort: asc"
          gecho "  filters:"
          gecho "    exclude:"
          gecho "    - '^test:'"
          gecho "    - '^chore'"
          gecho "    - 'merge conflict'"
          gecho "    - Merge pull request"
          gecho "    - Merge remote-tracking branch"
          gecho "    - Merge branch"
          gecho "    - go mod tidy"
          gecho "  groups:"
          gecho "    - title: 'Dependency updates'"
          gecho "      regexp: '^.*?(feat|fix)\(deps\)!?:.+$'"
          gecho "      order: 300"
          gecho "    - title: 'New Features'"
          gecho "      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'"
          gecho "      order: 100"
          gecho "    - title: 'Bug fixes'"
          gecho "      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'"
          gecho "      order: 200"
          gecho "    - title: 'Documentation updates'"
          gecho "      regexp: ^.*?doc(\([[:word:]]+\))??!?:.+$"
          gecho "      order: 400"
          gecho "    - title: Other work"
          gecho "      order: 9999"

      # To let testing take us as far as possible, only filter this step out.
      - uses: goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b # v4.2.0
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          distribution: goreleaser
          workdir:      ${{ inputs.working-directory }}
          version:      latest
          args:         release --clean --skip-validate
        env:
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
          GITHUB_TOKEN:           ${{ secrets.GITHUB_TOKEN }}
